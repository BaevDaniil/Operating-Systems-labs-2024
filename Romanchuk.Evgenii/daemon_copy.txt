#include "daemon.hpp"
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <syslog.h>
#include <cstring>
#include <cerrno>
#include <fstream>
#include <chrono>
#include <stdexcept>
#include <sstream>

void signal_handler(int sig) {
    Daemon& daemon = Daemon::get_instance();
    if (sig == SIGHUP) {
        daemon.set_sighup();
    } else if (sig == SIGTERM) {
        daemon.set_sigterm();
    }
}

Daemon::Daemon() : config(nullptr) {} // Инициализация указателя

void Daemon::daemonize() {
    pid_t pid = fork();
    if (pid < 0) {
        syslog(LOG_ERR, "Fork failed: %s", strerror(errno));
        exit(EXIT_FAILURE);
    } else if (pid > 0) {
        exit(EXIT_SUCCESS);
    }

    umask(0);
    if (setsid() < 0) {
        syslog(LOG_ERR, "Failed to create new session: %s", strerror(errno));
        exit(EXIT_FAILURE);
    }
    if (chdir("/") < 0) {
        syslog(LOG_ERR, "Failed to change directory to root: %s", strerror(errno));
        exit(EXIT_FAILURE);
    }
    close(STDIN_FILENO);
    close(STDOUT_FILENO);
    close(STDERR_FILENO);
    create_pid_file();
}

void Daemon::create_pid_file() {
    const char* pid_file = "/var/run/daemon.pid";
    int pid_file_handle = open(pid_file, O_RDWR | O_CREAT, 0600);
    if (pid_file_handle == -1) {
        syslog(LOG_ERR, "Cannot open PID file %s: %s", pid_file, strerror(errno));
        exit(EXIT_FAILURE);
    }

    if (lockf(pid_file_handle, F_TLOCK, 0) == -1) {
        syslog(LOG_ERR, "Daemon is already running.");
        exit(EXIT_FAILURE);
    }

    char str[10];
    snprintf(str, sizeof(str), "%d\n", getpid());
    write(pid_file_handle, str, strlen(str));

    close(pid_file_handle);
}

void Daemon::run(const std::string& config_file) {
    daemonize();
    config = new Config(config_file); // Создание нового экземпляра Config
    sync_data = config->read(); 
    last_sync_time = std::chrono::steady_clock::now();

    signal(SIGHUP, signal_handler);
    signal(SIGTERM, signal_handler);

    while (true) {
        if (got_sighup) {
            got_sighup = 0;
            syslog(LOG_INFO, "Reloading config file.");
            reload_config();
        }

        if (got_sigterm) {
            syslog(LOG_INFO, "Daemon exiting.");
            delete config; // Освобождение памяти
            exit(EXIT_SUCCESS);
        }

        auto now = std::chrono::steady_clock::now();
        int elapsed = std::chrono::duration_cast<std::chrono::seconds>(now - last_sync_time).count();
        if (elapsed >= sync_data[0].time) {
            sync_folders();
            last_sync_time = now;
        }

        // std::this_thread::sleep_for(std::chrono::seconds(sync_data[0].time));
        sleep(1);
    }
}

void Daemon::reload_config() {
    delete config; // Освобождение памяти
    config = new Config("/path/to/your/config/file"); // Замените на реальный путь
    sync_data = config->read(); // Обновляем sync_data
}

void Daemon::sync_folders() {
    std::filesystem::path src_dir(sync_data[0].folder1);
    std::filesystem::path dest_dir(sync_data[0].folder2);

    // Проверка существования папки назначения
    if (!std::filesystem::exists(dest_dir)) {
        syslog(LOG_INFO, "Folder dest doesn't exist %s", dest_dir.c_str());
    }

    // Удаление содержимого папки назначения
    // for (const auto& entry : std::filesystem::directory_iterator(dest_dir)) {
    //     std::filesystem::remove_all(entry.path());
    // }

    // Копирование файлов из исходной папки
    try{
        for (const auto& entry : std::filesystem::directory_iterator(src_dir)) {
            std::filesystem::copy(entry.path(), dest_dir / entry.path().filename(),
                                std::filesystem::copy_options::overwrite_existing);
        }  
    }catch(...){
        syslog(LOG_INFO, "Problems with copy proc");
    }


    syslog(LOG_INFO, "Synchronized folder %s to %s", sync_data[0].folder1.c_str(), sync_data[0].folder2.c_str());
}
